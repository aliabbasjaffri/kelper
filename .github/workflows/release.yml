name: release
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  update_version:
    name: Update Cargo.toml version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cargo-release
        run: cargo install cargo-release@0.25.17
      - name: Set version in Cargo.toml
        run: |
          # Extract version without 'v' prefix
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          echo "Updating Cargo.toml to version $VERSION"

          # Configure Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Update version using cargo-release (without publishing)
          cargo release $VERSION --execute --no-publish --no-tag --no-push --no-confirm --sign-commit

          # Push changes
          git push origin HEAD:main
  build:
    name: Build multi-platform binaries
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { os: ubuntu-latest, target: x86_64-unknown-linux-musl }
          - { os: ubuntu-latest, target: aarch64-unknown-linux-musl }
          - { os: macos-latest, target: x86_64-apple-darwin }
          - { os: macos-latest, target: aarch64-apple-darwin }
          - { os: windows-latest, target: x86_64-pc-windows-msvc }
    runs-on: ${{ matrix.platform.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Building ${{ matrix.platform.os }}-${{ matrix.platform.target }}
        uses: .github/actions/build-cli
        with:
          runner_os: ${{ matrix.platform.os }}
          target_platform: ${{ matrix.platform.target }}
          rust_toolchain: "stable"
      - name: Create compressed binary for krew on Windows
        if: matrix.platform.os == 'windows-latest'
        run: |
          Copy-Item -Path LICENSE -Destination target/${{ matrix.platform.target }}/release/
          Compress-Archive -Path target/${{ matrix.platform.target }}/release/kelper.exe, target/${{ matrix.platform.target }}/release/LICENSE -DestinationPath target/${{ matrix.platform.target }}/release/kelper.zip

      - name: Create compressed binary for krew on Unix-like
        if: matrix.platform.os != 'windows-latest'
        run: |
          cp LICENSE target/${{ matrix.platform.target }}/release/
          tar -czvf target/${{ matrix.platform.target }}/release/kelper-${{ matrix.platform.target }}.tar.gz -C target/${{ matrix.platform.target }}/release kelper LICENSE
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kelper-${{ matrix.platform.target }}
          path: target/${{ matrix.platform.target }}/release/kelper*

  release:
    name: Create Release, Publish Crate, and Update Homebrew
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download All Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
      - name: List downloaded files
        run: ls -lahR dist/

      - name: Create GitHub Release and Upload Assets
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Homebrew Tap
        uses: ./.github/actions/update-homebrew
        with:
          tap_repo: aliabbasjaffri/homebrew-kelper
          release_tag: ${{ github.ref_name }}
          repository: ${{ github.repository }}
          amd64_artifact_path: dist/x86_64-apple-darwin/kelper
          arm64_artifact_path: dist/aarch64-apple-darwin/kelper
          tap_token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Update new version for kelper in krew-index
        uses: rajatjindal/krew-release-bot@v0.0.47
        with:
          krew_template_file: .krew/kelper.yml

      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
